# -*- coding: utf-8 -*-
"""
Created on Sun Oct 16 22:29:26 2016
@author: Rong Huangfu
Nov. 6, 2017: update damage - risk relationship and color coding calculation
"""
import math

class LiFFT(object):
    def __init__(self, unit, lever_arm, load, rep):
        import colorsys
        self.unit = unit.lower()
        #print("UNIT:", self.unit)
        if self.unit == "imperial":
            self.lever_arm = float(lever_arm)
            self.load = float(load)
        elif self.unit == "metric":
            self.lever_arm = float(lever_arm) / 2.54  # cm to inch
            self.load = float(load) / 4.45 # N to lb

        self.rep = rep

        self.lowbackindex = ['0', '0.0000017', '0.0000018', '0.0000019', '0.0000020', '0.0000021', '0.0000022',
                             '0.0000023',
                             '0.0000024', '0.0000025', '0.0000027', '0.0000028', '0.0000029', '0.0000031', '0.0000032',
                             '0.0000034', '0.0000036', '0.0000038', '0.0000040', '0.0000042', '0.0000044', '0.0000046',
                             '0.0000048', '0.0000051', '0.0000053', '0.0000056', '0.0000059', '0.0000062', '0.0000065',
                             '0.0000069', '0.0000072', '0.0000076', '0.0000080', '0.0000084', '0.0000088', '0.0000093',
                             '0.0000097', '0.0000102', '0.0000108', '0.0000113', '0.0000119', '0.0000125', '0.0000132',
                             '0.0000138', '0.0000146', '0.0000153', '0.0000161', '0.0000169', '0.0000178', '0.0000187',
                             '0.0000197', '0.0000207', '0.0000218', '0.0000229', '0.0000241', '0.0000254', '0.0000267',
                             '0.0000281', '0.0000295', '0.0000310', '0.0000327', '0.0000343', '0.0000361', '0.0000380',
                             '0.0000400', '0.0000421', '0.0000443', '0.0000466', '0.0000490', '0.0000516', '0.0000542',
                             '0.0000571', '0.0000600', '0.0000632', '0.0000665', '0.0000700', '0.0000736', '0.0000775',
                             '0.0000815', '0.0000858', '0.0000903', '0.0000950', '0.0001000', '0.0001052', '0.0001107',
                             '0.0001165', '0.0001227', '0.0001291', '0.0001359', '0.0001430', '0.0001505', '0.0001584',
                             '0.0001668', '0.0001755', '0.0001848', '0.0001945', '0.0002047', '0.0002155', '0.0002269',
                             '0.0002388', '0.0002514', '0.0002647', '0.0002787', '0.0002934', '0.0003089', '0.0003252',
                             '0.0003423', '0.0003604', '0.0003795', '0.0003996', '0.0004207', '0.0004430', '0.0004664',
                             '0.0004911', '0.0005171', '0.0005445', '0.0005734', '0.0006037', '0.0006358', '0.0006695',
                             '0.0007050', '0.0007424', '0.0007818', '0.0008234', '0.0008671', '0.0009132', '0.0009617',
                             '0.0010128', '0.0010667', '0.0011235', '0.0011832', '0.0012462', '0.0013126', '0.0013825',
                             '0.0014561', '0.0015337', '0.0016155', '0.0017016', '0.0017924', '0.0018880', '0.0019887',
                             '0.0020949', '0.0022067', '0.0023245', '0.0024487', '0.0025795', '0.0027174', '0.0028626',
                             '0.0030157', '0.0031770', '0.0033469', '0.0035260', '0.0037147', '0.0039136', '0.0041231',
                             '0.0043440', '0.0045767', '0.0048219', '0.0050804', '0.0053527', '0.0056398', '0.0059422',
                             '0.0062610', '0.0065970', '0.0069511', '0.0073242', '0.0077175', '0.0081319', '0.0085688',
                             '0.0090292', '0.0095144', '0.0100258', '0.0105649', '0.0111330', '0.0117318', '0.0123629',
                             '0.0130282', '0.0137293', '0.0144684', '0.0152474', '0.0160685', '0.0169340', '0.0178463',
                             '0.0188079', '0.0198215', '0.0208900', '0.0220163', '0.0232035', '0.0244550', '0.0257742',
                             '0.0271649', '0.0286309', '0.0301762', '0.0318053', '0.0335226', '0.0353329', '0.0372414',
                             '0.0392533', '0.0413742', '0.0436101', '0.0459673']

        # risk reference list and damage reference list are linked together with same length and in increasing order
        '''
        self.risk_reference = ['0.067178273', '0.070114603', '0.073169211', '0.07634597', '0.079648801', '0.083081664',
                               '0.086648554', '0.090353489', '0.094200501', '0.098193628', '0.102336898', '0.106634321',
                               '0.111089872', '0.11570748', '0.120491008', '0.12544424', '0.130570865', '0.135874452',
                               '0.141358438', '0.147026101', '0.152880546', '0.158924674', '0.165161169', '0.171592466',
                               '0.178220733', '0.185047843', '0.192075354', '0.199304477', '0.20673606', '0.21437056',
                               '0.222208017', '0.230248037', '0.238489765', '0.246931867', '0.255572511', '0.26440935',
                               '0.273439504', '0.282659552', '0.292065516', '0.301652859', '0.311416474', '0.32135069',
                               '0.331449267', '0.341705407', '0.352111759', '0.362660436', '0.373343028', '0.384150625',
                               '0.395073841', '0.40610284', '0.417227372', '0.428436805', '0.439720163', '0.451066168',
                               '0.462463284', '0.473899763', '0.485363693', '0.496843044', '0.508325725', '0.519799628',
                               '0.531252683', '0.542672908', '0.554048457', '0.565367674', '0.576619131', '0.587791684',
                               '0.598874504', '0.609857127', '0.620729486', '0.631481943', '0.642105325', '0.652590942',
                               '0.662930618', '0.673116705', '0.6831421', '0.693000255', '0.702685186', '0.712191476',
                               '0.721514275', '0.730649297', '0.739592818', '0.74834166', '0.756893187', '0.765245284',
                               '0.773396345', '0.781345255', '0.78909137', '0.796634493', '0.803974855', '0.811113091',
                               '0.818050216', '0.824787602', '0.831326949', '0.837670268', '0.843819849', '0.849778242',
                               '0.855548232', '0.861132815', '0.866535175', '0.871758665']
        '''
        """
        # dropped in version 1.4.0 (Jun 5, 2018)
        # version 1.3.0 (Nov. 6, 2017)
        self.risk_reference = ['0.007909148', '0.017355711', '0.019081657', '0.019972158', '0.0235856',
                               '0.024791127', '0.028652411', '0.033519145', '0.035313542', '0.039284931', '0.040665709',
                               '0.041250494', '0.043451884', '0.044958613', '0.045433135', '0.04648781', '0.048102211',
                               '0.048515071', '0.049219387', '0.049938578', '0.050836456', '0.051200761', '0.052619735',
                               '0.052755219', '0.053308991', '0.054361285', '0.055029343', '0.055541697', '0.056133321',
                               '0.057005031', '0.058004398', '0.059751508', '0.06076775', '0.064027428', '0.064371706',
                               '0.066568854', '0.06688473', '0.06734484', '0.067878939', '0.068892694', '0.071282291',
                               '0.073282044', '0.073761985', '0.075053252', '0.075204186', '0.076190461', '0.076278322',
                               '0.077053159', '0.079651303', '0.080774428', '0.083655126', '0.083776217', '0.086868017',
                               '0.087774988', '0.088196912', '0.089348779', '0.090557428', '0.091201993', '0.092566813',
                               '0.095184859', '0.09520085', '0.096552092', '0.098222057', '0.101650863', '0.103587616',
                               '0.103721583', '0.103908055', '0.107432872', '0.108420201', '0.108954038', '0.110246596',
                               '0.1106807', '0.111891033', '0.113238406', '0.114109129', '0.114127899', '0.115601075',
                               '0.120285769', '0.120420775', '0.121453419', '0.12220846', '0.12321889', '0.130069906',
                               '0.135282961', '0.135343921', '0.135980254', '0.138264919', '0.139702585', '0.140309925',
                               '0.142565933', '0.1438392', '0.143852787', '0.144551121', '0.146427095', '0.147113129',
                               '0.147472521', '0.155201192', '0.161206017', '0.16150109', '0.161784424', '0.169594606',
                               '0.17438509', '0.174704855', '0.175421273', '0.175826632', '0.191481302', '0.193626752',
                               '0.193688607', '0.196622702', '0.19779055', '0.208942655', '0.211533098', '0.215927727',
                               '0.222194359', '0.239063812', '0.258157398', '0.265743444', '0.272071562', '0.274453002',
                               '0.276193375', '0.2772989', '0.285253391', '0.286394099', '0.292829543', '0.309390872',
                               '0.310449218', '0.316290862', '0.330525509', '0.331685814', '0.357746535', '0.358475426',
                               '0.359067952', '0.375402375', '0.381063556', '0.384790834', '0.385992292', '0.392251977',
                               '0.404900498', '0.407706198', '0.413539957', '0.431508415', '0.441503968', '0.442698365',
                               '0.495061798', '0.503372562', '0.507247671', '0.509483856', '0.517844632', '0.556702936',
                               '0.581781746', '0.593204422', '0.620217393', '0.625675285', '0.632580598', '0.645908582',
                               '0.650758222', '0.658483567', '0.66147731', '0.662652894', '0.668871561', '0.670485',
                               '0.682744777', '0.683872389', '0.686618545', '0.694446661', '0.720667587', '0.72474178',
                               '0.732168177', '0.732674659', '0.735215563', '0.753695615', '0.760518171', '0.760540482',
                               '0.770708172', '0.785492571', '0.79834268', '0.799896934', '0.8279035', '0.842682039',
                               '0.849544172', '0.867080334', '0.871286108', '0.878345158', '0.885341367', '0.885779384',
                               '0.89211464', '0.894673505', '0.896951929', '0.897040223', '0.8972969', '0.900950488',
                               '0.90770497', '0.922885235', '0.925934107', '0.926005845', '0.934922066', '0.939697295',
                               '0.946989323', '0.949442052', '0.960751662', '0.962034372', '0.965167639', '0.970070144',
                               '0.977087887', '0.977322132', '0.979595667', '0.980214113', '0.981599137', '0.982343862',
                               '0.983050436', '0.987294867', '0.987613398', '0.988333014', '0.988362849', '0.995815357',
                               '0.995948711', '0.996288732', '0.996759996', '0.997579365', '0.997679978', '0.998002368',
                               '0.998396974', '0.998627416', '0.998758759', '0.999080661', '0.999269304', '0.999271127',
                               '0.99937111', '0.999627024', '0.999677998', '0.999717005', '0.999914462', '0.999953074',
                               '0.999964696', '0.999999254']
        """


        '''
        self.damage_reference = ['0.00040734', '0.000511549', '0.000702128', '0.000830182', '0.00090075', '0.00095173',
                                 '0.001018798', '0.001056622', '0.001095901', '0.001126755', '0.001156223', '0.00118411',
                                 '0.00118411', '0.001397787', '0.00142002', '0.001459324', '0.001543527', '0.001574644',
                                 '0.001635533', '0.001694281', '0.00174755', '0.001852684', '0.001924389',
                                 '0.002000135',
                                 '0.002045383', '0.002098134', '0.002240366', '0.002266408', '0.002396686',
                                 '0.002448719',
                                 '0.002503624', '0.002553952', '0.002700918', '0.002741092', '0.002932895',
                                 '0.003103921',
                                 '0.003152965', '0.003296514', '0.003347397', '0.003470751', '0.003699289',
                                 '0.003789358',
                                 '0.00412434', '0.004183228', '0.004761703', '0.004795058', '0.005213055',
                                 '0.005696231',
                                 '0.006875315', '0.007171335', '0.007930747', '0.008474562', '0.008769511',
                                 '0.009484328',
                                 '0.010447132', '0.012134293', '0.01250972', '0.012891011', '0.014566098',
                                 '0.015486548',
                                 '0.019429342', '0.021625556', '0.024092419', '0.029538511', '0.035191116',
                                 '0.037901739',
                                 '0.038563719', '0.040813001', '0.044223705', '0.047043698', '0.052751262',
                                 '0.057211967',
                                 '0.064802862', '0.075022145', '0.081505261', '0.110833209', '0.133670997',
                                 '0.157389631',
                                 '0.178553559', '0.181113888', '0.194461643', '0.242645584', '0.280034243',
                                 '0.352112697',
                                 '0.516012868', '0.651885628', '0.96729766', '1.107114867', '1.266862179',
                                 '1.734132965',
                                 '1.915400034', '5.850364138', '8.684081116', '11.63863186', '18.44923715',
                                 '28.47942345',
                                 '37.74846092', '73.93893371', '468.772785', '33704.85658']
        '''
        """
        # dropped in version 1.4.0 
        # version 1.3.0 (Nov. 6, 2017)
        self.damage_reference = ['0.000185414', '0.000403194', '0.000443066', '0.000463658', '0.000547386',
                                 '0.000575386', '0.000665325', '0.00077929', '0.000821494', '0.00091528',
                                 '0.000948014', '0.000961898', '0.001014271', '0.001050219', '0.001061558',
                                 '0.001086789', '0.001125492', '0.001135406', '0.001152333', '0.001169637',
                                 '0.001191269', '0.001200055', '0.001234326', '0.001237603', '0.001251002',
                                 '0.001276498', '0.001292707', '0.00130515', '0.001319532', '0.001340749',
                                 '0.001365111', '0.001407801', '0.001432691', '0.001512823', '0.001521312',
                                 '0.001575615', '0.001583439', '0.001594843', '0.001608093', '0.001633278',
                                 '0.001692822', '0.001742849', '0.001754882', '0.00178731', '0.001791106',
                                 '0.001815933', '0.001818147', '0.001837686', '0.001903407', '0.001931915',
                                 '0.002005309', '0.002008403', '0.002087635', '0.002110966', '0.002121833',
                                 '0.002151545', '0.002182793', '0.002199486', '0.002234902', '0.002303098',
                                 '0.002303516', '0.002338851', '0.002382649', '0.002473025', '0.002524343',
                                 '0.0025279', '0.002532853', '0.002626818', '0.002653257', '0.002667574',
                                 '0.002702302', '0.002713986', '0.002746616', '0.002783033', '0.002806621',
                                 '0.00280713', '0.002847134', '0.002975147', '0.002978854', '0.003007246',
                                 '0.003028043', '0.003055925', '0.003246523', '0.003393391', '0.003395118',
                                 '0.003413158', '0.003478131', '0.003519178', '0.003536556', '0.003601306',
                                 '0.003637988', '0.00363838', '0.003658542', '0.003712854', '0.00373277',
                                 '0.003743216', '0.003969824', '0.004148551', '0.004157395', '0.004165892',
                                 '0.00440224', '0.004549265', '0.004559136', '0.004581276', '0.004593819',
                                 '0.005087223', '0.005156242', '0.005158237', '0.0052532', '0.00529118',
                                 '0.005659174', '0.005746058', '0.005894694', '0.006109392', '0.006703994',
                                 '0.007407983', '0.007697373', '0.007943183', '0.008036751', '0.008105503',
                                 '0.008149341', '0.008468593', '0.008514934', '0.00877906', '0.0094805',
                                 '0.009526426', '0.009782381', '0.010424087', '0.010477556', '0.011727569',
                                 '0.011763941', '0.011793567', '0.012631694', '0.012932165', '0.013132919',
                                 '0.013198133', '0.013541951', '0.014258087', '0.014420963', '0.014764469',
                                 '0.01586552', '0.016507829', '0.01658608', '0.020370658', '0.021042839',
                                 '0.021363828', '0.021551314', '0.022267345', '0.025941365', '0.028666851',
                                 '0.030017274', '0.033527354', '0.034296862', '0.035302579', '0.037352526',
                                 '0.038136539', '0.039430595', '0.039947663', '0.04015317', '0.041264113',
                                 '0.041559077', '0.043896638', '0.044120584', '0.044672602', '0.04629968',
                                 '0.05240217', '0.05345295', '0.055449187', '0.055589306', '0.056300208',
                                 '0.061904541', '0.06418862', '0.064196299', '0.067849136', '0.073768481',
                                 '0.079607227', '0.080363506', '0.096294449', '0.106951034', '0.112600415',
                                 '0.129647386', '0.134416476', '0.14315176', '0.152855562', '0.153502101',
                                 '0.163432355', '0.167777355', '0.171825338', '0.171985766', '0.172453684',
                                 '0.179373541', '0.193589256', '0.234491501', '0.244700347', '0.244950557',
                                 '0.280284624', '0.303445871', '0.346753796', '0.364091033', '0.471653344',
                                 '0.487844317', '0.532342636', '0.620403622', '0.811056764', '0.81942885',
                                 '0.910544621', '0.938906826', '1.009252836', '1.051583055', '1.095140903',
                                 '1.457278826', '1.494335231', '1.585408685', '1.589424807', '4.347138604',
                                 '4.487410718', '4.890116833', '5.586172269', '7.432097832', '7.747458836',
                                 '8.969123148', '11.12378292', '12.94709995', '14.28522449', '19.15792331',
                                 '23.97893889', '24.03753794', '27.76566054', '46.25860123', '53.39984437',
                                 '60.57905227', '194.9155207', '350.3437099', '462.5860123', '19998.27257']
        """


        def hsv2rgb(h, s, v):
            return tuple(int(i * 255) for i in colorsys.hsv_to_rgb(h, s, v))

        color_HSV = []

        for n in range(110, 10, -1):  # reversed order of range
            H = n / 360.0
            S = 1
            V = 1
            R, G, B = hsv2rgb(H, S, V)
            packed = str('#%02x%02x%02x' % (R, G, B))
            color_HSV.append(str(packed))

        color_HSV_new = []
        for i in range(len(color_HSV)):
            if i % 2 != 0 and i < 52:  # - 26
                color_HSV_new.append(color_HSV[i])
            elif i >= 52 and i < 62:  # + 5
                color_HSV_new.append(color_HSV[i])
                if i % 2 == 0:
                    color_HSV_new.append(color_HSV[i])
            elif i >= 62 and i % 3 == 0:  # - 26
                color_HSV_new.append(color_HSV[i])

        color_HSV_new = color_HSV_new + [color_HSV[-1]] * 49

        self.color_list = color_HSV_new
        self.out_range_colorlist = ['#ff2e00']

    '''
    # this function been updated using risk information
    def damage_color_match(self, damage_reference_list, damage_input):
        damage = damage_input
        d_list = damage_reference_list
        d_index = 500
        for i in range(len(d_list) - 1):
            if damage > float(d_list[i]) and damage <= float(d_list[i + 1]):
                d_index = i
            elif damage > float(d_list[-1]):
                d_index = 700
        return d_index

    # this function been updated using risk information
    def color_from_damage(self, damage_input):
        d_index = self.damage_color_match(self.damage_reference, damage_input)
        color = self.color_list[0]
        if d_index != 500 and d_index != 700:
            color = self.color_list[d_index]
        elif d_index == 700:
            color = self.out_range_colorlist[0]
        return color
    '''



    # version 1.3.0, modified in 1.4.0
    def colorFromDamageRisk(self, damage_input):
        d = damage_input
        if d < 0.0001:
            return self.color_list[0]
        elif d > 1:
            return self.color_list[-1]
        else:
            risk_value = self.riskFromDamage(damage_input)
            risk_index = int(risk_value * 100)
            return self.color_list[risk_index]


        # used to calculate cut point based on risk percentage definition (25%, 50%)
    def damage_reference_cal(self, damage_reference_list, risk_reference_list, risk_input):
        d_list = damage_reference_list
        r_list = risk_reference_list
        risk = float(risk_input)

        for i in range(len(r_list)):

            if risk < float(r_list[i]) and i != 0:
                r_range = float(r_list[i]) - float(r_list[i - 1])
                dif_percent = (risk - float(r_list[i - 1])) / r_range

                d_range = float(d_list[i]) - float(d_list[i - 1])
                return_damage = float(d_list[i - 1]) + d_range * dif_percent
                break
        return return_damage


    """
    # droped in Version 1.4.0
    # used to calculate estimated risk based on total damage of the job
    def risk_reference_cal(self, damage_reference_list, risk_reference_list, damage_input):
        d_list = damage_reference_list
        r_list = risk_reference_list
        damage = float(damage_input)

        for i in range(len(d_list)):

            if damage < float(d_list[i]) and i != 0:
                d_range = float(d_list[i]) - float(d_list[i - 1])
                dif_percent = (damage - float(d_list[i - 1])) / d_range
                r_range = float(r_list[i]) - float(r_list[i - 1])
                return_risk = float(r_list[i - 1]) + r_range * dif_percent
                break

            elif damage < float(d_list[i]) and i == 0:
                return_risk = float(r_list[0])
                break

        return return_risk
    """

    # version 1.4.0
    def riskFromDamage(self, damage_input):
        cd = math.log(damage_input, 10)
        y = 1.7229 + 1.0239 * cd
        p = math.exp(y) / (1 + math.exp(y))
        return p

    def calculate(self):
        lever_arm = self.lever_arm
        load = self.load
        rep = self.rep
        m = round((lever_arm / 12 * load), 1)

        if m == 0:
            d_percycle = 0
        elif m > 0 and m < 200:
            index = int(m)
            d_percycle = float(self.lowbackindex[index])
        elif m >= 200:  # over the index limit
            d_percycle = float(self.lowbackindex[-1])


        if self.unit == "metric":
            m = (m / 0.73756) * 9.81 # ft.lb to N.m
        else:
            pass
        m = round(m, 1)

        task_damge = round((d_percycle * rep), 4)

        color = self.colorFromDamageRisk(task_damge)




        return m, task_damge, color

    """
    # dropped in version 1.4.0
    def damage_to_risk(self, damage):
        task_damge = damage
        if task_damge == 0:
            risk_output = 0

        elif task_damge != 0 and task_damge < float(self.damage_reference[0]):
            risk_output = float(self.risk_reference[0]) * 100
        elif task_damge > float(self.damage_reference[0]):
            risk_output = self.risk_reference_cal(self.damage_reference, self.risk_reference, task_damge) * 100

        risk_output = round(risk_output, 1)

        return risk_output
    """






